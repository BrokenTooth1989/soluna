#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc --input src/sdftext.glsl --output build/sdftext.glsl.h --slang hlsl4 --format sokol

    Overview:
    =========
    Shader program: 'texquad':
        Get shader desc: texquad_shader_desc(sg_query_backend());
        Vertex Shader: vs
        Fragment Shader: fs
        Attributes:
            ATTR_texquad_position => 0
    Bindings:
        Uniform block 'vs_params':
            C struct: vs_params_t
            Bind slot: UB_vs_params => 0
        Uniform block 'fs_params':
            C struct: fs_params_t
            Bind slot: UB_fs_params => 1
        Storage buffer 'sprite_buffer':
            C struct: sprite_t
            Bind slot: SBUF_sprite_buffer => 1
            Readonly: true
        Storage buffer 'sr_lut':
            C struct: sr_mat_t
            Bind slot: SBUF_sr_lut => 0
            Readonly: true
        Image 'tex':
            Image type: SG_IMAGETYPE_2D
            Sample type: SG_IMAGESAMPLETYPE_FLOAT
            Multisampled: false
            Bind slot: IMG_tex => 0
        Sampler 'smp':
            Type: SG_SAMPLERTYPE_FILTERING
            Bind slot: SMP_smp => 0
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before sdftext.glsl.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define ATTR_texquad_position (0)
#define UB_vs_params (0)
#define UB_fs_params (1)
#define SBUF_sprite_buffer (1)
#define SBUF_sr_lut (0)
#define IMG_tex (0)
#define SMP_smp (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct vs_params_t {
    float texsize;
    int baseinst;
    float framesize[2];
} vs_params_t;
#pragma pack(pop)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct fs_params_t {
    float edge_mask;
    float dist_multiplier;
    int color;
    float unused;
} fs_params_t;
#pragma pack(pop)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(4) typedef struct sprite_t {
    uint32_t offset;
    uint32_t u;
    uint32_t v;
} sprite_t;
#pragma pack(pop)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(8) typedef struct sr_mat_t {
    float m[4];
} sr_mat_t;
#pragma pack(pop)
/*
    struct sprite
    {
        uint offset;
        uint u;
        uint v;
    };

    struct sr_mat
    {
        row_major float2x2 m;
    };

    ByteAddressBuffer _14 : register(t16);
    cbuffer vs_params : register(b0)
    {
        float _24_texsize : packoffset(c0);
        int _24_baseinst : packoffset(c0.y);
        float2 _24_framesize : packoffset(c0.z);
    };

    ByteAddressBuffer _111 : register(t17);

    static float4 gl_Position;
    static int gl_VertexIndex;
    static int gl_InstanceIndex;
    static float3 position;
    static float2 uv;

    struct SPIRV_Cross_Input
    {
        float3 position : TEXCOORD0;
        uint gl_VertexIndex : SV_VertexID;
        uint gl_InstanceIndex : SV_InstanceID;
    };

    struct SPIRV_Cross_Output
    {
        float2 uv : TEXCOORD0;
        float4 gl_Position : SV_Position;
    };

    void vert_main()
    {
        sprite _32;
        _32.offset = _14.Load((gl_InstanceIndex + _24_baseinst) * 12 + 0);
        _32.u = _14.Load((gl_InstanceIndex + _24_baseinst) * 12 + 4);
        _32.v = _14.Load((gl_InstanceIndex + _24_baseinst) * 12 + 8);
        int2 u2 = int2(0, int(_32.u & 65535u));
        int2 v2 = int2(0, int(_32.v & 65535u));
        float2 _94 = float2(float(u2[gl_VertexIndex & 1]), float(v2[gl_VertexIndex >> 1]));
        float2x2 _119 = asfloat(uint2x2(_111.Load2(int(position.z) * 16 + 0), _111.Load2(int(position.z) * 16 + 8)));
        float2 _124 = mul(_119, (_94 - float2(int2(int(_32.offset >> uint(16)), int(_32.offset & 65535u)) - int2(32768, 32768))) + position.xy) * _24_framesize;
        gl_Position = float4(_124.x - 1.0f, _124.y + 1.0f, 0.0f, 1.0f);
        uv = (float2(int2(int(_32.u >> uint(16)), int(_32.v >> uint(16)))) + _94) * _24_texsize;
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        gl_VertexIndex = int(stage_input.gl_VertexIndex);
        gl_InstanceIndex = int(stage_input.gl_InstanceIndex);
        position = stage_input.position;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.uv = uv;
        return stage_output;
    }
*/
static const uint8_t vs_source_hlsl4[1928] = {
    0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x73,0x70,0x72,0x69,0x74,0x65,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x6f,0x66,0x66,0x73,0x65,0x74,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x75,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x75,0x69,0x6e,0x74,0x20,0x76,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,
    0x75,0x63,0x74,0x20,0x73,0x72,0x5f,0x6d,0x61,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x72,0x6f,0x77,0x5f,0x6d,0x61,0x6a,0x6f,0x72,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x78,0x32,0x20,0x6d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x42,0x79,0x74,0x65,0x41,
    0x64,0x64,0x72,0x65,0x73,0x73,0x42,0x75,0x66,0x66,0x65,0x72,0x20,0x5f,0x31,0x34,
    0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x74,0x31,0x36,0x29,
    0x3b,0x0a,0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,
    0x30,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x32,0x34,0x5f,0x74,0x65,0x78,0x73,0x69,0x7a,0x65,0x20,0x3a,0x20,0x70,0x61,0x63,
    0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,0x34,0x5f,0x62,0x61,0x73,0x65,0x69,0x6e,0x73,
    0x74,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,
    0x30,0x2e,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x20,0x5f,0x32,0x34,0x5f,0x66,0x72,0x61,0x6d,0x65,0x73,0x69,0x7a,0x65,0x20,0x3a,
    0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x2e,0x7a,
    0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x42,0x79,0x74,0x65,0x41,0x64,0x64,0x72,0x65,
    0x73,0x73,0x42,0x75,0x66,0x66,0x65,0x72,0x20,0x5f,0x31,0x31,0x31,0x20,0x3a,0x20,
    0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x74,0x31,0x37,0x29,0x3b,0x0a,0x0a,
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,
    0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,
    0x63,0x20,0x69,0x6e,0x74,0x20,0x67,0x6c,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,
    0x6e,0x64,0x65,0x78,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x74,
    0x20,0x67,0x6c,0x5f,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x49,0x6e,0x64,0x65,
    0x78,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,
    0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x76,0x3b,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,
    0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x54,
    0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,
    0x6e,0x74,0x20,0x67,0x6c,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,0x6e,0x64,0x65,
    0x78,0x20,0x3a,0x20,0x53,0x56,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,0x44,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x67,0x6c,0x5f,0x49,0x6e,0x73,
    0x74,0x61,0x6e,0x63,0x65,0x49,0x6e,0x64,0x65,0x78,0x20,0x3a,0x20,0x53,0x56,0x5f,
    0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x49,0x44,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,
    0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x76,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,
    0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,
    0x53,0x56,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x7d,0x3b,0x0a,
    0x0a,0x76,0x6f,0x69,0x64,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x73,0x70,0x72,0x69,0x74,0x65,0x20,0x5f,
    0x33,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x33,0x32,0x2e,0x6f,0x66,0x66,0x73,
    0x65,0x74,0x20,0x3d,0x20,0x5f,0x31,0x34,0x2e,0x4c,0x6f,0x61,0x64,0x28,0x28,0x67,
    0x6c,0x5f,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x49,0x6e,0x64,0x65,0x78,0x20,
    0x2b,0x20,0x5f,0x32,0x34,0x5f,0x62,0x61,0x73,0x65,0x69,0x6e,0x73,0x74,0x29,0x20,
    0x2a,0x20,0x31,0x32,0x20,0x2b,0x20,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,
    0x33,0x32,0x2e,0x75,0x20,0x3d,0x20,0x5f,0x31,0x34,0x2e,0x4c,0x6f,0x61,0x64,0x28,
    0x28,0x67,0x6c,0x5f,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x49,0x6e,0x64,0x65,
    0x78,0x20,0x2b,0x20,0x5f,0x32,0x34,0x5f,0x62,0x61,0x73,0x65,0x69,0x6e,0x73,0x74,
    0x29,0x20,0x2a,0x20,0x31,0x32,0x20,0x2b,0x20,0x34,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x5f,0x33,0x32,0x2e,0x76,0x20,0x3d,0x20,0x5f,0x31,0x34,0x2e,0x4c,0x6f,0x61,
    0x64,0x28,0x28,0x67,0x6c,0x5f,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x49,0x6e,
    0x64,0x65,0x78,0x20,0x2b,0x20,0x5f,0x32,0x34,0x5f,0x62,0x61,0x73,0x65,0x69,0x6e,
    0x73,0x74,0x29,0x20,0x2a,0x20,0x31,0x32,0x20,0x2b,0x20,0x38,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x6e,0x74,0x32,0x20,0x75,0x32,0x20,0x3d,0x20,0x69,0x6e,0x74,
    0x32,0x28,0x30,0x2c,0x20,0x69,0x6e,0x74,0x28,0x5f,0x33,0x32,0x2e,0x75,0x20,0x26,
    0x20,0x36,0x35,0x35,0x33,0x35,0x75,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x6e,0x74,0x32,0x20,0x76,0x32,0x20,0x3d,0x20,0x69,0x6e,0x74,0x32,0x28,0x30,0x2c,
    0x20,0x69,0x6e,0x74,0x28,0x5f,0x33,0x32,0x2e,0x76,0x20,0x26,0x20,0x36,0x35,0x35,
    0x33,0x35,0x75,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x5f,0x39,0x34,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x66,
    0x6c,0x6f,0x61,0x74,0x28,0x75,0x32,0x5b,0x67,0x6c,0x5f,0x56,0x65,0x72,0x74,0x65,
    0x78,0x49,0x6e,0x64,0x65,0x78,0x20,0x26,0x20,0x31,0x5d,0x29,0x2c,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x28,0x76,0x32,0x5b,0x67,0x6c,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,
    0x49,0x6e,0x64,0x65,0x78,0x20,0x3e,0x3e,0x20,0x31,0x5d,0x29,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x78,0x32,0x20,0x5f,0x31,0x31,0x39,
    0x20,0x3d,0x20,0x61,0x73,0x66,0x6c,0x6f,0x61,0x74,0x28,0x75,0x69,0x6e,0x74,0x32,
    0x78,0x32,0x28,0x5f,0x31,0x31,0x31,0x2e,0x4c,0x6f,0x61,0x64,0x32,0x28,0x69,0x6e,
    0x74,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2e,0x7a,0x29,0x20,0x2a,0x20,
    0x31,0x36,0x20,0x2b,0x20,0x30,0x29,0x2c,0x20,0x5f,0x31,0x31,0x31,0x2e,0x4c,0x6f,
    0x61,0x64,0x32,0x28,0x69,0x6e,0x74,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x2e,0x7a,0x29,0x20,0x2a,0x20,0x31,0x36,0x20,0x2b,0x20,0x38,0x29,0x29,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x5f,0x31,0x32,0x34,
    0x20,0x3d,0x20,0x6d,0x75,0x6c,0x28,0x5f,0x31,0x31,0x39,0x2c,0x20,0x28,0x5f,0x39,
    0x34,0x20,0x2d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x69,0x6e,0x74,0x32,0x28,
    0x69,0x6e,0x74,0x28,0x5f,0x33,0x32,0x2e,0x6f,0x66,0x66,0x73,0x65,0x74,0x20,0x3e,
    0x3e,0x20,0x75,0x69,0x6e,0x74,0x28,0x31,0x36,0x29,0x29,0x2c,0x20,0x69,0x6e,0x74,
    0x28,0x5f,0x33,0x32,0x2e,0x6f,0x66,0x66,0x73,0x65,0x74,0x20,0x26,0x20,0x36,0x35,
    0x35,0x33,0x35,0x75,0x29,0x29,0x20,0x2d,0x20,0x69,0x6e,0x74,0x32,0x28,0x33,0x32,
    0x37,0x36,0x38,0x2c,0x20,0x33,0x32,0x37,0x36,0x38,0x29,0x29,0x29,0x20,0x2b,0x20,
    0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2e,0x78,0x79,0x29,0x20,0x2a,0x20,0x5f,
    0x32,0x34,0x5f,0x66,0x72,0x61,0x6d,0x65,0x73,0x69,0x7a,0x65,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x5f,0x31,0x32,0x34,0x2e,0x78,0x20,0x2d,0x20,
    0x31,0x2e,0x30,0x66,0x2c,0x20,0x5f,0x31,0x32,0x34,0x2e,0x79,0x20,0x2b,0x20,0x31,
    0x2e,0x30,0x66,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x76,0x20,0x3d,0x20,0x28,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x28,0x69,0x6e,0x74,0x32,0x28,0x69,0x6e,0x74,0x28,0x5f,0x33,0x32,0x2e,
    0x75,0x20,0x3e,0x3e,0x20,0x75,0x69,0x6e,0x74,0x28,0x31,0x36,0x29,0x29,0x2c,0x20,
    0x69,0x6e,0x74,0x28,0x5f,0x33,0x32,0x2e,0x76,0x20,0x3e,0x3e,0x20,0x75,0x69,0x6e,
    0x74,0x28,0x31,0x36,0x29,0x29,0x29,0x29,0x20,0x2b,0x20,0x5f,0x39,0x34,0x29,0x20,
    0x2a,0x20,0x5f,0x32,0x34,0x5f,0x74,0x65,0x78,0x73,0x69,0x7a,0x65,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,
    0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,
    0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,
    0x6c,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,0x6e,0x64,0x65,0x78,0x20,0x3d,0x20,
    0x69,0x6e,0x74,0x28,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,
    0x67,0x6c,0x5f,0x56,0x65,0x72,0x74,0x65,0x78,0x49,0x6e,0x64,0x65,0x78,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x49,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,
    0x49,0x6e,0x64,0x65,0x78,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x49,0x6e,0x73,0x74,0x61,
    0x6e,0x63,0x65,0x49,0x6e,0x64,0x65,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x70,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x69,0x6e,0x70,0x75,0x74,0x2e,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,
    0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,
    0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,
    0x75,0x74,0x2e,0x75,0x76,0x20,0x3d,0x20,0x75,0x76,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,
    0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
/*
    cbuffer fs_params : register(b0)
    {
        float _37_edge_mask : packoffset(c0);
        float _37_dist_multiplier : packoffset(c0.y);
        int _37_color : packoffset(c0.z);
        float _37_unused : packoffset(c0.w);
    };

    Texture2D<float4> tex : register(t0);
    SamplerState smp : register(s0);

    static float2 uv;
    static float4 frag_color;

    struct SPIRV_Cross_Input
    {
        float2 uv : TEXCOORD0;
    };

    struct SPIRV_Cross_Output
    {
        float4 frag_color : SV_Target0;
    };

    void frag_main()
    {
        float _42 = (length(fwidth(uv)) * 128.0f) * _37_dist_multiplier;
        frag_color = float4(float((_37_color >> 16) & 255) * 0.0039215688593685626983642578125f, float((_37_color >> 8) & 255) * 0.0039215688593685626983642578125f, float(_37_color & 255) * 0.0039215688593685626983642578125f, float((_37_color >> 24) & 255) * 0.0039215688593685626983642578125f) * smoothstep(_37_edge_mask - _42, _37_edge_mask + _42, tex.Sample(smp, uv).x);
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        uv = stage_input.uv;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.frag_color = frag_color;
        return stage_output;
    }
*/
static const uint8_t fs_source_hlsl4[1120] = {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x30,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,0x37,
    0x5f,0x65,0x64,0x67,0x65,0x5f,0x6d,0x61,0x73,0x6b,0x20,0x3a,0x20,0x70,0x61,0x63,
    0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,0x37,0x5f,0x64,0x69,0x73,0x74,0x5f,
    0x6d,0x75,0x6c,0x74,0x69,0x70,0x6c,0x69,0x65,0x72,0x20,0x3a,0x20,0x70,0x61,0x63,
    0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x2e,0x79,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x33,0x37,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,
    0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x33,0x37,0x5f,0x75,0x6e,0x75,0x73,0x65,0x64,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,
    0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x2e,0x77,0x29,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x3c,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x3e,0x20,0x74,0x65,0x78,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,
    0x65,0x72,0x28,0x74,0x30,0x29,0x3b,0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,
    0x74,0x61,0x74,0x65,0x20,0x73,0x6d,0x70,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,
    0x74,0x65,0x72,0x28,0x73,0x30,0x29,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x76,0x3b,0x0a,0x73,0x74,0x61,0x74,
    0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,
    0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x76,0x20,
    0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
    0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,0x61,0x72,0x67,0x65,0x74,0x30,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x5f,0x34,0x32,0x20,0x3d,0x20,0x28,0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,
    0x66,0x77,0x69,0x64,0x74,0x68,0x28,0x75,0x76,0x29,0x29,0x20,0x2a,0x20,0x31,0x32,
    0x38,0x2e,0x30,0x66,0x29,0x20,0x2a,0x20,0x5f,0x33,0x37,0x5f,0x64,0x69,0x73,0x74,
    0x5f,0x6d,0x75,0x6c,0x74,0x69,0x70,0x6c,0x69,0x65,0x72,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x28,0x66,0x6c,0x6f,0x61,0x74,0x28,0x28,0x5f,0x33,0x37,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3e,0x3e,0x20,0x31,0x36,0x29,0x20,0x26,0x20,0x32,
    0x35,0x35,0x29,0x20,0x2a,0x20,0x30,0x2e,0x30,0x30,0x33,0x39,0x32,0x31,0x35,0x36,
    0x38,0x38,0x35,0x39,0x33,0x36,0x38,0x35,0x36,0x32,0x36,0x39,0x38,0x33,0x36,0x34,
    0x32,0x35,0x37,0x38,0x31,0x32,0x35,0x66,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,
    0x28,0x5f,0x33,0x37,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3e,0x3e,0x20,0x38,0x29,
    0x20,0x26,0x20,0x32,0x35,0x35,0x29,0x20,0x2a,0x20,0x30,0x2e,0x30,0x30,0x33,0x39,
    0x32,0x31,0x35,0x36,0x38,0x38,0x35,0x39,0x33,0x36,0x38,0x35,0x36,0x32,0x36,0x39,
    0x38,0x33,0x36,0x34,0x32,0x35,0x37,0x38,0x31,0x32,0x35,0x66,0x2c,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x28,0x5f,0x33,0x37,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x26,0x20,
    0x32,0x35,0x35,0x29,0x20,0x2a,0x20,0x30,0x2e,0x30,0x30,0x33,0x39,0x32,0x31,0x35,
    0x36,0x38,0x38,0x35,0x39,0x33,0x36,0x38,0x35,0x36,0x32,0x36,0x39,0x38,0x33,0x36,
    0x34,0x32,0x35,0x37,0x38,0x31,0x32,0x35,0x66,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x28,0x28,0x5f,0x33,0x37,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3e,0x3e,0x20,0x32,
    0x34,0x29,0x20,0x26,0x20,0x32,0x35,0x35,0x29,0x20,0x2a,0x20,0x30,0x2e,0x30,0x30,
    0x33,0x39,0x32,0x31,0x35,0x36,0x38,0x38,0x35,0x39,0x33,0x36,0x38,0x35,0x36,0x32,
    0x36,0x39,0x38,0x33,0x36,0x34,0x32,0x35,0x37,0x38,0x31,0x32,0x35,0x66,0x29,0x20,
    0x2a,0x20,0x73,0x6d,0x6f,0x6f,0x74,0x68,0x73,0x74,0x65,0x70,0x28,0x5f,0x33,0x37,
    0x5f,0x65,0x64,0x67,0x65,0x5f,0x6d,0x61,0x73,0x6b,0x20,0x2d,0x20,0x5f,0x34,0x32,
    0x2c,0x20,0x5f,0x33,0x37,0x5f,0x65,0x64,0x67,0x65,0x5f,0x6d,0x61,0x73,0x6b,0x20,
    0x2b,0x20,0x5f,0x34,0x32,0x2c,0x20,0x74,0x65,0x78,0x2e,0x53,0x61,0x6d,0x70,0x6c,
    0x65,0x28,0x73,0x6d,0x70,0x2c,0x20,0x75,0x76,0x29,0x2e,0x78,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,
    0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,
    0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,
    0x76,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,
    0x75,0x76,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,
    0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,
    0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,

};
static inline const sg_shader_desc* texquad_shader_desc(sg_backend backend) {
    if (backend == SG_BACKEND_D3D11) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)vs_source_hlsl4;
            desc.vertex_func.d3d11_target = "vs_4_0";
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)fs_source_hlsl4;
            desc.fragment_func.d3d11_target = "ps_4_0";
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[0].hlsl_sem_name = "TEXCOORD";
            desc.attrs[0].hlsl_sem_index = 0;
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].hlsl_register_b_n = 0;
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 16;
            desc.uniform_blocks[1].hlsl_register_b_n = 0;
            desc.storage_buffers[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.storage_buffers[0].readonly = true;
            desc.storage_buffers[0].hlsl_register_t_n = 17;
            desc.storage_buffers[1].stage = SG_SHADERSTAGE_VERTEX;
            desc.storage_buffers[1].readonly = true;
            desc.storage_buffers[1].hlsl_register_t_n = 16;
            desc.images[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.images[0].image_type = SG_IMAGETYPE_2D;
            desc.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.images[0].multisampled = false;
            desc.images[0].hlsl_register_t_n = 0;
            desc.samplers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.samplers[0].hlsl_register_s_n = 0;
            desc.image_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.image_sampler_pairs[0].image_slot = 0;
            desc.image_sampler_pairs[0].sampler_slot = 0;
            desc.label = "texquad_shader";
        }
        return &desc;
    }
    return 0;
}
